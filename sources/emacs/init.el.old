;;; init.el --- Emacs configuration file -*- lexical-binding: t; -*-

;; Author: Markus Jylhänkangas <markus@jylhis.com>
;; URL: https://github.com/jylhis/nixos
;; Version: 1.0
;; Package-Requires: ((emacs "29.1"))

;;; Commentary:
;; This is the main configuration file for Emacs.  It sets up packages,
;; customizations, and keybindings for an enhanced development experience.

;;; Code:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Bootstrap
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)

;; Ensure Emacs version is 29.1 or higher
(when (version< emacs-version "29.1")
  (error "This configuration requires Emacs 29.1 or higher"))

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;;; https://github.com/svaante/dape?tab=readme-ov-file#performance
;;; Optimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 50 1024 1024)))) ;; Reset to 50MB after startup
(setq read-process-output-max (* 1024 1024)) ; 1MB

;;; Ideas:
;;; https://github.com/mohkale/compile-multi
;;; https://github.com/dash-docs-el/dash-docs OR https://github.com/astoff/devdocs.el
;;; https://github.com/mclear-tools/consult-notes
;;; https://github.com/org-roam/org-roam
;;; https://github.com/Qkessler/consult-project-extra/
;;; https://github.com/emacs-citar/citar

;;; DEBUGGING:
;;; Start debugger on specific message
;;; (setq debug-on-message "standard-indent adjusted")

;;; Explicitly set the preferred coding systems to avoid annoying prompt
;;; from Emacs (especially on Microsoft Windows)
(prefer-coding-system 'utf-8)

;;; Always load the newest version of a file
(setq load-prefer-newer t)

;;; Store automatic customization options elsewhere
(setq custom-file (locate-user-emacs-file "custom.el"))
(when (file-exists-p custom-file) (load custom-file))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Core Emacs enhancements
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package emacs
  :custom
  (text-mode-ispell-word-completion nil "Emacs 30 and newer: Disable Ispell completion function.")
  (context-menu-mode t "Enable context menu for vertico")
  (inhibit-startup-screen t)
  (initial-scratch-message nil)
  (use-short-answers t "life is too short to type yes or no")
  (create-lockfiles nil)
  (delete-by-moving-to-trash t "Delete by moving to trash in interactive mode")
  (sentence-end-double-space nil "Disable the obsolete practice of end-of-line spacing from the typewriter era.")
  (save-place-mode t "Automatically save your place in files")
  (word-wrap t "Continue wrapped lines at whitespace rather than breaking in the middle of a word.")
  (visible-bell nil "No blinking")
  (ring-bell-function #'ignore "No beeping")
  (scroll-preserve-screen-position 1 "keep the cursor in the same position while scrolling")
  (enable-recursive-minibuffers t "Support opening new minibuffers from inside existing minibuffers")
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt) "Do not allow the cursor in the minibuffer prompt")
  ;; Ignore case
  (completion-ignore-case t "Don't consider case significant in completion")
  (read-buffer-completion-ignore-case t "Ignore case when reading buffer name")
  (read-file-name-completion-ignore-case t "Ignore case for file completion")
  :bind
  (
   ("C-z" . nil)
   ("C-x C-z" . nil)
   ("M-o" . other-window)
   ("M-p" . scroll-down-line)
   ("M-n" . scroll-up-line))
  :init
  (load-theme 'leuven t)
  (load-theme 'leuven-dark t t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(use-package window
  :custom
  ;; Prefer side by side splitting
  (split-width-threshold 170)
  (split-height-threshold nil))
;;:config
;;TODO: (winner-mode 1)

(use-package files
  :hook
  (after-save . executable-make-buffer-file-executable-if-script-p) ; Make script file executable by default
  :custom
  ;; Disable autosave and backups
  (auto-save-default nil "Disable separate autosave files")
  (make-backup-files nil "Disable auto backup files")
  (find-file-visit-truename t "Resolve symlinks")
  (confirm-kill-processes nil "when quitting emacs, just kill processes")
  (enable-local-variables t "ask if local variables are safe once"))

(use-package autorevert
  :custom
  (global-auto-revert-mode t "Automatically refresh buffer if changed on disk")
  (global-auto-revert-non-file-buffers t "Revert also non-file buffers"))

(use-package recentf
  :custom
  (recentf-max-saved-items 50 "Increase the default a bit")
  (recentf-mode t "Keep track of open files"))

(use-package savehist
  :init
  (savehist-mode))

(use-package simple
  :custom
  (read-extended-command-predicate
   #'command-completion-default-include-p "Hide commands in M-x which do not work in the current mode")
  (kill-do-not-save-duplicates t "Remove duplicates from the kill ring to reduce clutter")
  (line-number-mode t "Show line number in modeline")
  (column-number-mode t "Show column number"))

(use-package subword
  :diminish
  :hook ((prog-mode . subword-mode)
         (minibuffer-setup . subword-mode)))

(use-package repeat
  :config
  (repeat-mode))

(use-package delsel
  :hook (after-init . delete-selection-mode))

(use-package dired
  :custom
  (dired-auto-revert-buffer #'dired-buffer-stale-p "Revert the Dired buffer without prompting.")
  (dired-clean-confirm-killing-deleted-buffers nil "Disable the prompt about killing the Dired buffer for a deleted directory.")
  (dired-create-destination-dirs 'ask)
  (dired-dwim-target t "Propose a target for intelligent moving or copying.")
  (dired-filter-verbose nil)
  (dired-free-space nil)
  (dired-listing-switches "-alh --group-directories-first" "In dired, show hidden files and human readable sizes")
  (dired-omit-verbose nil)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'top)
  (dired-vc-rename-file t)
  (dired-omit-files (concat
                     "\\`[.]?#\\|\\`[.][.]?\\'"
                     "\\|^[a-zA-Z0-9]\\.syncthing-enc\\'"
                     "\\|^\\.stfolder\\'"
                     "\\|^\\.stversions\\'"
                     "\\|^__pycache__\\'")))

(use-package dired-x
  :after dired
  :hook (dired-mode . dired-omit-mode))

(use-package ibuffer
  :bind
  (([remap list-buffers] . ibuffer)))

(use-package ffap
  :custom
  (ffap-machine-p-known 'reject)) ; Don’t attempt to ping unknown hostnames

(use-package super-save
  :ensure
  :diminish
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-remote-files nil)
  (super-save-silent t)
  (super-save-delete-trailing-whitespace 'except-current-line)
  :config
  (super-save-mode 1))

(use-package vundo
  :ensure
  :bind ("C-x u" . vundo)
  :config (setq vundo-glyph-alist vundo-unicode-symbols))

(use-package expand-region
  :ensure
  :bind ("C-=" . er/expand-region))

(use-package multiple-cursors
  :ensure
  :bind
  (("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)))

(use-package drag-stuff
  :ensure
  :diminish
  :autoload drag-stuff-define-keys
  :hook ((text-mode prog-mode) . drag-stuff-mode)
  :config
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  (drag-stuff-define-keys))

;; For using security keys with Emacs.
;; (use-package fido-mode)

;; For appointment notifications.
;; (use-package appt
;;   :config
;;   (appt-activate t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; UI enhancements
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; `adaptive-fill-mode' is a minor mode that makes `fill-paragraph` behave more
;;; intelligently, especially with prefixed text like comments or lists.
;; (use-package adaptive-fill-mode
;;   :hook (text-mode . adaptive-fill-mode))

(use-package diminish :ensure)

(use-package which-key
  :diminish
  :hook (after-init . which-key-mode))

(use-package hl-line
  :custom
  (global-hl-line-sticky-flag t)
  :hook ((after-init . global-hl-line-mode)
         ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode org-mode) .
          (lambda () (setq-local global-hl-line-mode nil)))))

(use-package rainbow-delimiters
  :ensure
  :hook((lisp-mode emacs-lisp-mode) . rainbow-delimiters-mode))

(use-package auto-dark
  :ensure
  :diminish
  :after leuven-theme
  :custom
  (auto-dark-themes '((leuven-dark) (leuven)))
  :config
  (auto-dark-mode 1)
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (when (display-graphic-p frame)
                (with-selected-frame frame (auto-dark-mode 1))))))

(use-package calendar
  :config
  (copy-face 'font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 0.7)
  (setq calendar-week-start-day 1)
  (setq calendar-intermonth-text
        '(propertize (format "%2d" (car (calendar-iso-from-absolute
                                         (calendar-absolute-from-gregorian (list month day year)))))
                     'font-lock-face 'calendar-iso-week-face)))


(use-package breadcrumb
  :ensure
  :init
  (breadcrumb-mode))

(use-package nerd-icons :ensure)

(use-package nerd-icons-corfu
  :ensure
  :after nerd-icons corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-ibuffer
  :ensure
  :after nerd-icons
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package nerd-icons-dired
  :ensure
  :after nerd-icons
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-completion
  :ensure
  :after marginalia nerd-icons
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package hl-todo
  :ensure
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq
   hl-todo-highlight-punctuation ":"
   hl-todo-keyword-faces
   `(("TODO" warning bold)
     ("FIXME" error bold)
     ("HACK" font-lock-constant-face bold)
     ("REVIEW" font-lock-keyword-face bold)
     ("NOTE" success bold)
     ("DEPRECATED" font-lock-doc-face bold))))

(use-package sr-speedbar :ensure)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Completion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; This configuration uses `vertico` as the completion UI. It is a modern
;;; alternative to the built-in `icomplete-mode`.

(use-package vertico
  :ensure
  :init
  (vertico-mode))

(use-package corfu
  :ensure
  :init
  (global-corfu-mode)
  (corfu-history-mode))

(use-package cape
  :ensure
  :init
  ;; Add `completion-at-point` to the list of completion functions
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword))

(use-package consult
  :ensure
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-fd)
         ("M-s f" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("C-s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  :init
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))

(use-package orderless
  :ensure
  :custom
  (completion-styles '(orderless partial-completion flex basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  :ensure
  :init
  (marginalia-mode))

(use-package embark
  :ensure
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure
  :after (embark consult)
  :hook (embark-collect-mode . consult-preview-at-point-mode)
  :bind (:map minibuffer-mode-map
              ("C-c C-o" . embark-export)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Help and Documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; This configuration uses `helpful` and `consult-info` to enhance the help
;;; and documentation experience. Use `C-h f` for `helpful-callable`, `C-h v`
;;; for `helpful-variable`, `C-h k` for `helpful-key`, and `C-c i` for
;;; `consult-info`.

(use-package help-at-pt
  :custom
  (help-at-pt-display-when-idle t)) ; Display messages when idle, without prompting

(use-package helpful
  :ensure
  :diminish
  :bind
  (("C-h f" . #'helpful-callable)
   ("C-h v" . #'helpful-variable)
   ("C-h k" . #'helpful-key)
   ("C-c C-d" . #'helpful-at-point)
   ("C-h F" . #'helpful-function)
   ([remap describe-symbol]   . helpful-symbol)
   ("C-h C" . #'helpful-command)))


(use-package apropos
  :custom
  (apropos-do-all t))

(use-package dash-docs
  :ensure
  :defines (dash-docs-docsets dash-docs-docsets-path)
  :custom
  (dash-docs-docsets-path "~/.local/share/Zeal/Zeal/docsets/")
  :config
  (dolist (spec '((emacs-lisp-mode . ("Emacs Lisp"))
                  (python-mode . ("Python 3"))
                  (js-mode . ("JavaScript" "NodeJS"))
                  (go-mode . ("Go"))
                  (c++-mode . ("C++"))
                  (java-mode . ("Java SE"))
                  (ruby-mode . ("Ruby"))
                  (haskell-mode . ("Haskell"))))
    (add-hook (intern (concat (symbol-name (car spec)) "-hook"))
              (let ((docsets (cdr spec)))
                (lambda () (setq-local dash-docs-docsets docsets))))))

(use-package consult-dash
  :after dash-docs
  :config
  (consult-customize consult-dash :initial (thing-at-point 'symbol)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Org Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package org
  :custom
  (org-directory "~/Documents")
  (org-pretty-entities t)
  (org-clock-persist 'history)
  :config
  (org-clock-persistence-insinuate)
  (defun my/find-org-files-recursively (directory)
    "Find all .org files recursively in DIRECTORY."
    (when (and directory (file-exists-p directory) (file-directory-p directory))
      (let ((files '()))
        (dolist (file (directory-files-recursively directory "\\.org\\'"))
          (when (file-regular-p file)
            (push (file-truename file) files)))
        (nreverse files))))
  
  (defun my/update-org-agenda-files ()
    "Update org-agenda-files to include all .org files under Documents."
    (let ((org-files (my/find-org-files-recursively (expand-file-name org-directory))))
      (when org-files
        (setq org-agenda-files org-files))
      (message "Updated org-agenda-files: %d files found" (length org-files))))
  
  (my/update-org-agenda-files)
  
  ;; Update agenda files periodically instead of on every agenda access
  (run-with-idle-timer 300 t #'my/update-org-agenda-files)
  :hook (org-mode . visual-line-mode)
  :bind (
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)))

(use-package org-appear
  :ensure
  :hook
  (org-mode . org-appear-mode)
  :after org)

(use-package org-modern
  :ensure
  :after org
  :hook
  (org-mode . global-org-modern-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Programming Languages & Tools
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; For efficient navigation, this configuration provides `avy` (`M-g c`, `M-g l`,
;;; `M-g w`), `zoxide` (`M-g z`), and `consult` for searching and jumping to
;;; files and buffers.

(use-package prog-mode
  :hook
  (prog-mode . display-line-numbers-mode))

(use-package treesit
  :custom
  (treesit-font-lock-level 4))

(use-package treesit-auto
  :ensure
  :custom
  (treesit-auto-install nil)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package treesit-fold
  :ensure
  :hook (after-init . global-treesit-fold-indicators-mode)
  :init (setq treesit-fold-indicators-priority -1))

(use-package flymake
  :custom
  (flymake-fringe-indicator-position 'right-fringe)
  (flymake-suppress-zero-counters t "Suppress the display of Flymake error counters when there are no errors."))

(use-package sideline
  :ensure
  :hook (prog-mode . sideline-mode)
  :custom
  (sideline-backends-left '(sideline-flymake)))

(use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))

(use-package consult-flyspell
  :ensure
  :after (consult flyspell))

(use-package eglot
  :hook ((prog-mode . (lambda ()
                        (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                          (eglot-ensure))))
         ((markdown-mode yaml-mode yaml-ts-mode) . eglot-ensure))
  :init
  (setq eglot-send-changes-idle-time 0.5)
  (setq eglot-autoshutdown t)
  :custom
  (eglot-report-progress nil)
  (eglot-extend-to-xref t)
  :config
  (add-hook 'eglot-managed-mode-hook
            (lambda ()
              (flymake-mode 1)))
  (add-hook 'eglot-managed-mode-hook #'eldoc-mode))

(use-package consult-eglot
  :ensure
  :after (consult eglot)
  :bind (:map eglot-mode-map
              ("C-M-." . consult-eglot-symbols)))

(use-package consult-eglot-embark
  :ensure
  :after (consult eglot embark))

(use-package xref
  :init
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep)))

(use-package elisp-lint :ensure)
(use-package package-lint :ensure)

(use-package dtrt-indent
  :ensure
  :hook (prog-mode . dtrt-indent-mode))

(use-package direnv
  :ensure
  :config
  (direnv-mode)
  (add-to-list 'warning-suppress-types '(direnv)))

(use-package avy
  :ensure
  :bind (
         ("M-g c"   . avy-goto-char)
         ("M-g l" . avy-goto-line)
         ("M-g w" . avy-goto-word-1))
  :custom (avy-all-windows 'all-frames))

(use-package zoxide
  :ensure
  :bind
  ("M-g z" . zoxide-find-file)
  ("M-g M-z" . zoxide-find-file)
  :hook
  (find-file . zoxide-add))

(use-package xt-mouse
  :custom
  (xterm-mouse-mode 1 "Enable mouse in terminal"))

(use-package vterm
  :ensure
  :custom
  (vterm-always-compile-module t))

;; Major modes
(use-package gnuplot
  :ensure
  :mode ("\\.plt\\'" . gnuplot-mode))

(use-package markdown-mode
  :after dash
  :ensure
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :hook (markdown-mode . visual-line-mode)
  :bind (:map markdown-mode-map
              ("C-c C-e" . markdown-do)))

(use-package conf-mode
  :ensure
  :mode
  (("/.dockerignore\\'" . conf-unix-mode)
   ("/.gitignore\\'" . conf-unix-mode)))

(use-package haskell-mode :ensure)
(use-package diff-mode :ensure :mode "\\.patch[0-9]*\\'")
(use-package terraform-mode :ensure)
(use-package dockerfile-mode :ensure)
(use-package docker-compose-mode :ensure)
(use-package gitlab-ci-mode :ensure)
(use-package ansible :ensure)
(use-package ssh-config-mode :ensure)
(use-package adoc-mode :ensure)
(use-package go-mode :ensure)
(use-package nix-ts-mode :ensure :mode "\\.nix\\'")
(use-package cmake-mode :ensure :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
(use-package mermaid-mode :ensure)
(use-package yaml-mode :ensure)
(use-package modern-cpp-font-lock :ensure)
(use-package just-mode :ensure)
(use-package sql-indent :ensure)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Version Control
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package magit
  :bind (("C-c g" . magit-status))
  :custom
  (magit-diff-refine-hunk t "Show word-granularity differences within diff hunks")
  (magit-diff-refine-ignore-whitespace t "Ignore whitespace changes in word-granularity differences")
  (magit-diff-hide-trailing-cr-characters t "Hide trailing ^M"))

(use-package diff-hl
  :ensure
  :custom
  (diff-hl-draw-borders nil)
  (fringes-outside-margins t)
  :hook ((after-init . global-diff-hl-mode)
         (after-init . global-diff-hl-show-hunk-mouse-mode)
         (dired-mode . diff-hl-dired-mode)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :after magit
  :config
  (diff-hl-flydiff-mode 1))

(use-package smerge-mode
  :hook (prog-mode . (lambda ()
                      (when (and buffer-file-name (vc-backend buffer-file-name))
                        (smerge-mode 1))))
  :bind (:map smerge-mode-map
              ("C-c ^ u" . smerge-keep-upper)
              ("C-c ^ l" . smerge-keep-lower)
              ("C-c ^ n" . smerge-next)
              ("C-c ^ p" . smerge-prev)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Debugging
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package gdb-mi
  :custom
  (gdb-many-windows t)
  (gdb-show-main t)
  (gdb-debuginfod-en)
  (gdb-debuginfod-enable-setting t))

(use-package dape
  :ensure
  :config
  (dape-breakpoint-global-mode)
  (add-hook 'dape-compile-hook 'kill-buffer)
  :custom
  (dape-buffer-window-arrangement 'gud)
  (dape-info-hide-mode-line nil)
  (Dape-inlay-hints t "Showing inlay hints"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Compilation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package compile-multi
  :ensure
  :config
  (setq compile-multi-config
        '((go-mode . (("go test" . "go test ./...")
                      ("go test current" . "go test .")
                      ("go build" . "go build .")
                      ("just check" . "just check")
                      ("just format" . "just format")))
          (python-mode . (("pytest" . "pytest")
                         ("pytest file" . "pytest %file-name%")
                         ("just check" . "just check")
                         ("just format" . "just format")))
          (haskell-mode . (("stack test" . "stack test")
                          ("cabal test" . "cabal test")
                          ("just check" . "just check")
                          ("just format" . "just format")))
          (nix-ts-mode . (("nix flake check" . "nix flake check")
                         ("nix fmt" . "nix fmt")
                         ("just check" . "just check")
                         ("just format" . "just format")))
          (c++-mode . (("cmake build" . "cmake --build build")
                      ("make" . "make")
                      ("just check" . "just check")
                      ("just format" . "just format")))
          (emacs-lisp-mode . (("elisp-lint" . "just elisp-lint %file-name%")
                             ("just format" . "just format"))))))

(use-package consult-compile-multi
  :ensure
  :after compile-multi
  :demand t
  :config (consult-compile-multi-mode))

(use-package compile-multi-nerd-icons
  :ensure
  :after nerd-icons-completion
  :after compile-multi
  :demand t)

(use-package compile-multi-embark
  :after embark
  :after compile-multi
  :demand t
  :config (compile-multi-embark-mode +1))

(use-package wgrep
  :ensure
  :init
  (setq
   wgrep-auto-save-buffer t
   wgrep-change-readonly-file t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;.
;;; LLM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;.

(use-package aidermacs :ensure)

(use-package claude-code-ide
  :vc (:url "https://github.com/manzaltu/claude-code-ide.el" :rev :newest)
  :bind ("C-c C-'" . claude-code-ide-menu) ; Set your favorite keybinding
  :config
  (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Custom functions and settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'ansi-color)
(defun display-ansi-colors ()
  "Apply ANSI color codes to the current buffer.
This function processes the entire buffer and interprets any ANSI
escape sequences, rendering the corresponding colors in the buffer.

Useful for viewing logs or other text files that include ANSI
color codes."
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

(provide 'init)
;;; init.el ends here
