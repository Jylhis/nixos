
#+title: Markus Emacs configuration
#+author: Jylhis
#+TODO: Learn(r) Bug(r) InProgress(i) | Done(d)

* What is this?

This is a modern, modular Emacs configuration designed for software development and text editing. It provides an IDE-like experience while staying true to Emacs principles.

* Why this configuration?

**Goals:**
- Prefer built-in functionality, but use third-party packages when they clearly improve the experience
- Everything should integrate well with Emacs and work in both standalone and client/server modes
- Modern development features (LSP, completion, project management)
- Clean, maintainable, and modular configuration structure

**Key Features:**
- Modern completion framework (Vertico + Consult + Corfu)
- LSP integration with Eglot for intelligent code features
- Git integration with Magit
- Project-aware file and buffer management
- Tree-sitter for better syntax highlighting and code understanding
- Comprehensive package collection for multiple programming languages

* How to discover keybindings

Instead of memorizing long lists of keybindings, use these built-in discovery tools:

** Essential discovery commands
- =C-h b= (=describe-bindings=) - Show ALL current keybindings
- =C-h k= (=describe-key=) - Describe what a specific key does
- =C-h m= (=describe-mode=) - Show current mode's keybindings and features
- =C-h f= (=describe-function=) - Describe any function
- =C-h v= (=describe-variable=) - Describe any variable

** Interactive help and completion
- =M-x= (=execute-extended-command=) - Use completion to discover commands
- =C-h C-q= - Quick help interface
- =F10= - Open menu bar for mouse-driven discovery
- =M-`= - Interactive keyboard-driven menu

** Package-specific discovery
- =C-h P= (=describe-package=) - Learn about installed packages
- =C-c C-d= (=helpful-at-point=) - Context-aware help (requires =helpful= package)

** Key prefix exploration
When you press a prefix key (like =C-x=), wait a moment to see available completions, or press =C-h= after the prefix to see all options.

* Configuration architecture

This configuration uses a modular Nix-based setup with clear separation of concerns:

** Package management
- [[file:default.nix][sources/emacs/default.nix]] - Defines the Emacs package with all dependencies
- 80+ carefully selected packages for development, completion, and productivity
- Includes modern packages like =consult=, =vertico=, =corfu=, =magit=, =eglot=

** System integration  
- [[file:../../modules/home/emacs.nix][modules/home/emacs.nix]] - Home Manager integration
- Handles configuration deployment, shell aliases, fonts, and Emacs daemon service
- Provides convenient aliases: =emc= (terminal client), =emcg= (GUI client)

** Configuration structure
- =init.el= and =early-init.el= - Main initialization files
- =config/*.el= - Modular configuration files organized by feature
- =lisp/*.el= - Custom utility functions and helpers

* Getting started

** First launch
1. Start Emacs (the configuration will be automatically loaded via Nix)
2. Use =M-x= and start typing to discover available commands
3. Try =C-h m= to see what the current mode offers
4. Explore with =C-h b= to see all available keybindings

** Essential workflows
- **File management**: =C-x C-f= to open files, =C-x p f= for project files
- **Buffer switching**: =C-x b= with completion and recent files
- **Search**: =C-s= for current buffer, =M-s r= for project-wide ripgrep
- **Code navigation**: =M-.= for definitions, =M-,= to go back
- **Git**: =C-x g= for Magit status

** Learning more
Use the discovery commands above rather than memorizing keybindings. The configuration is designed to be discoverable and self-documenting.


* Customization

Emacs provides powerful customization through the Customize interface:

** Main customize commands
- =M-x customize= - Main Customize interface showing all groups
- =M-x customize-browse= - Tree-based group browser
- =M-x customize-mode= - Customize current major mode (recommended for each mode you use)
- =M-x customize-group= - Customize specific group (e.g., =python=, =magit=)
- =M-x customize-face= - Customize specific face (put cursor on face for auto-completion)

** Tracking changes
- =M-x customize-customized= - Review changed but unsaved customizations
- =M-x customize-saved= - View all saved customizations (useful for troubleshooting)
- =M-x customize-changed= - See options changed since specific Emacs version
- =M-x customize-themes= - Browse and switch between installed themes

** Tips
- Use =M-x customize-mode= for every major mode you use regularly
- Place point on faces/variables before calling customize commands for auto-completion
- Use =customize-saved= to track down problematic settings
